#!/bin/bash
# Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

set -eo pipefail

PIPELINE="$BUILDKITE_PLUGIN_FACTORY_REPORTER_PIPELINE_ID"
JOB_TYPE="$BUILDKITE_PLUGIN_FACTORY_REPORTER_JOB_TYPE"
PLATFORM="$BUILDKITE_PLUGIN_FACTORY_REPORTER_BUILD_PLATFORM"
# TODO: Use this, or remove it
#FIRST_STEP="$BUILDKITE_PLUGIN_FACTORY_REPORTER_FIRST_STEP"

if [[ $SKIP_BUILDKITE_PLUGINS == "true" ]]; then
    echo "SKIP_BUILDKITE_PLUGINS is set. Skipping factory reporter"
    exit 0
fi
if [[ -z $PIPELINE ]]; then
    echo "No pipeline ID found, skipping factory reporter"
    exit 0
fi

if [[ $BUILDKITE_PULL_REQUEST == "false" ]]; then
  START_SECONDS=$(date +%s)
  export START_SECONDS
  if ! buildkite-agent meta-data exists start-seconds; then
    buildkite-agent meta-data set start-seconds "$START_SECONDS"
    echo "Build started at $START_SECONDS"
  else
    echo "start-seconds already set, skipping"
  fi

  if [[ -x "$BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/factory-command.sh" ]]; then
    FACTORY_COMMAND="$BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/factory-command.sh"
  elif command -v factory-command &> /dev/null; then
    FACTORY_COMMAND="factory-command"
  else
    echo "Error: No factory-command found." >&2
    exit 1
  fi
  buildkite-agent meta-data set factory-command "$FACTORY_COMMAND"

  JOB_JSON=$($FACTORY_COMMAND update-buildkite-job-run "$START_SECONDS" "$PIPELINE" "running")
  echo "Output from updating job run : $JOB_JSON"

  # Only create a build if the job type is 'build'
  if [[ $JOB_TYPE != "build" ]]; then
    echo "Job type is not 'build', skipping build creation"
    exit 0
  fi

  JSON=$($FACTORY_COMMAND create-build "$PIPELINE $PLATFORM")
  echo "Output from creating build : $JSON"

  VESPA_FACTORY_BUILD_ID=$(jq -re '.buildId' <<< "$JSON")
  export VESPA_FACTORY_BUILD_ID

  echo "Created factory build $VESPA_FACTORY_BUILD_ID for pipeline $PIPELINE"

  VARIABLES=$(jq -r '.variables | to_entries | .[] | "export \(.key)=\(.value|tojson)"' <<< "$JSON")
  eval "$VARIABLES"

  # Export variables for vespa version and git references for use in other scripts

  VESPA_VERSION=$(jq -re .version <<< "$JSON")
  export VESPA_VERSION
  buildkite-agent meta-data set vespa-version "$VESPA_VERSION"

  GITREF_VESPA=$(jq -re '.commits[]|select(.repo=="vespa")|.ref' <<< "$JSON")
  export GITREF_VESPA
  buildkite-agent meta-data set gitref-vespa "$GITREF_VESPA"

  GITREF_VESPAAI_CLOUD=$(jq -re '.commits[]|select(.repo=="vespaai-cloud")|.ref' <<< "$JSON")
  export GITREF_VESPAAI_CLOUD
  buildkite-agent meta-data set gitref-vespaai-cloud "$GITREF_VESPAAI_CLOUD"

  $FACTORY_COMMAND update-build-status "$PIPELINE" running "Building"
  echo "Set factory build $VESPA_FACTORY_BUILD_ID status to running"

else
  VESPA_VERSION="$(curl -sSLf 'https://api.factory.vespa.ai/factory/v1/latest-successful-build?platform=opensource_centos7&vespaMajor=8' | jq -re .version)"
  export VESPA_VERSION
  buildkite-agent meta-data set vespa-version "$VESPA_VERSION"
fi
